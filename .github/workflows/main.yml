name: Build

env:
  Config: Release
  Debug: ${{ false }}
  ModuleName: AzurePipelinesUtils

on:
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  Build:

    runs-on: ubuntu-latest
    env:
      PS_GALLERY_TOKEN: ${{ secrets.PSGALLERY_API_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Build module
        id: build_module
        shell: pwsh
        run: |
          ./Build.ps1 -Targets Package -Verbose:$${{ env.Debug }} -InstallDependencies
      # - name: Publish Test Results
      #   uses: EnricoMi/publish-unit-test-result-action/windows@v2
      #   if: always()
      #   with:
      #     files: |
      #       out\TestResults-Pester*.xml
      - name: Publish Portable
        uses: actions/upload-artifact@v4
        with:
          name: portable
          path: "out/portable/*.zip"
    outputs:
      BUILD_NAME: ${{ steps.build_module.outputs.BUILD_NAME }}

  Staging:

    runs-on: ubuntu-latest
    environment: staging
    needs: [ Build ]
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      BUILD_NAME: ${{ needs.Build.outputs.BUILD_NAME }}
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
      - name: Extract release notes
        id: extract_release_notes
        shell: pwsh
        run: |
          $fileName = (Get-ChildItem 'Docs/ReleaseNotes/*.md' | Sort-Object Name -Descending | Select -ExpandProperty FullName -First 1)
          Write-Output $fileName
          $releaseNotes = (Get-Content $fileName -Encoding UTF8 | Select-Object -Skip 4)
          Write-Output $releaseNotes
          Write-Output 'RELEASE_NOTES<<EOF' >> $env:GITHUB_OUTPUT
          Write-Output $releaseNotes >> $env:GITHUB_OUTPUT
          Write-Output 'EOF' >> $env:GITHUB_OUTPUT
      - name: Create Draft Release
        id: create_release
        shell: pwsh
        run: |
          # Install module
          Install-Module PowerShellForGitHub -Scope CurrentUser -Force

          # Connect to GitHub
          Set-GitHubConfiguration -SuppressTelemetryReminder -DefaultOwnerName igoravl -DefaultRepository ${{ env.ModuleName }}

          $ghCreds = New-Object System.Management.Automation.PSCredential @( "pat",
            (ConvertTo-SecureString -String $env:GITHUB_TOKEN -AsPlainText -Force)
          )
          Set-GitHubAuthentication -Credential $ghCreds -SessionOnly 

          # Remove stale draft releases
          # TODO: Limit scope to this pull request (filter by PR name)
          Get-GitHubRelease | Where-Object Draft -eq $true | Remove-GitHubRelease -Force

          # Create new draft releases
          $release = New-GitHubRelease -Tag 'v${{ env.BUILD_NAME }}' -Name 'Release ${{ env.BUILD_NAME }}' `
             -Draft -PreRelease:($env:BUILD_NAME -like '*-*') -commitish '${{ github.sha }}' -Body: @'
          ${{ steps.extract_release_notes.outputs.RELEASE_NOTES }}
          '@

          # Upload assets
          @('portable/${{ env.ModuleName }}*.zip') `
          | ForEach-Object { New-GitHubReleaseAsset -Release $release.Id -Path $_ }

    outputs:
      BUILD_NAME: ${{ needs.Build.outputs.BUILD_NAME }}
      RELEASE_NOTES: ${{ steps.extract_release_notes.outputs.RELEASE_NOTES }}

  Release: 

    runs-on: ubuntu-latest
    environment: production
    needs: [ Staging ]
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      BUILD_NAME: ${{ needs.Staging.outputs.BUILD_NAME }}
    steps: 
      - name: Promote release
        id: promote_release
        shell: pwsh
        run: |
          # Install module
          Install-Module PowerShellForGitHub -Scope CurrentUser -Force
          # Connect to GitHub
          Set-GitHubConfiguration -SuppressTelemetryReminder -DefaultOwnerName igoravl -DefaultRepository ${{ env.ModuleName }}
          Set-GitHubAuthentication -SessionOnly -Credential (New-Object System.Management.Automation.PSCredential @("pat",
            (ConvertTo-SecureString -String $env:GITHUB_TOKEN -AsPlainText -Force)))
          # Promote release
          $rel = Get-GitHubRelease `
          | Where-Object { ($_.Draft -eq $true) -and ($_.Name -eq "Release $($env:BUILD_NAME)")  }
          Set-GitHubRelease -Release $rel.id -Draft:$false
          Write-Output "RELEASE_URL=$($rel.html_url)" >> $env:GITHUB_OUTPUT
          Write-Output "RELEASE_TAG=$($env:BUILD_NAME.Replace('+', '%2B'))" >> $env:GITHUB_OUTPUT
    outputs:
      BUILD_NAME: ${{ needs.Staging.outputs.BUILD_NAME }}
      RELEASE_NOTES: ${{ needs.Staging.outputs.RELEASE_NOTES }}
      RELEASE_URL: ${{ steps.promote_release.outputs.RELEASE_URL }}
      RELEASE_TAG: ${{ steps.promote_release.outputs.RELEASE_TAG }}

  PSGallery:

    runs-on: ubuntu-latest
    needs: [ Release ]
    environment: psgallery
    env:
      RELEASE_NOTES: ${{ needs.Release.outputs.RELEASE_NOTES }}
      PSGALLERY_KEY: ${{ secrets.API_KEY }}
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: portable
      - name: Publish artifact
        shell: pwsh
        run: |
          Install-Module PackageManagement -Scope CurrentUser -Force
          Install-Module PowerShellGet -Scope CurrentUser -Force
          Expand-Archive AzureArtifacts*.zip -DestinationPath Module/${{ env.ModuleName }}
          $releaseNotes = $env:RELEASE_NOTES
          Publish-Module -Name Module/${{ env.ModuleName }} -NuGetApiKey $env:PSGALLERY_KEY -AllowPreRelease -ReleaseNotes $releaseNotes

  Nuget:

    runs-on: ubuntu-latest
    needs: [ Release ]
    environment: nuget
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: nuget
      - name: Push package
        run: |
          dotnet nuget push $(ls ${{ env.ModuleName }}*.nupkg) -s https://api.nuget.org/v3/index.json -k ${{ secrets.API_KEY }} --skip-duplicate

  Chocolatey:

    runs-on: windows-latest
    needs: [ Release ]
    environment: chocolatey
    env:
      CHOCO_KEY: ${{ secrets.API_KEY }}
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: chocolatey
      - name: Install Chocolatey
        shell: pwsh
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
      - name: Push package
        run: |
          choco push $(ls ${{ env.ModuleName }}*.nupkg) --api-key $env:CHOCO_KEY --source='https://push.chocolatey.org/'
  
  WinGet:

    runs-on: ubuntu-latest
    needs: [ Release ]
    environment: winget
    env:
      GITHUB_TOKEN: ${{ secrets.API_GITHUB_TOKEN }}
      BUILD_NAME: ${{ needs.Release.outputs.BUILD_NAME }}
    steps:
      - name: Clone winget-pkgs repository
        shell: bash
        run: |
          git clone --single-branch --branch "master" "https://igoravl:$GITHUB_TOKEN@github.com/igoravl/winget-pkgs.git"
          cd winget-pkgs
          git remote add upstream https://github.com/microsoft/winget-pkgs.git
          git fetch upstream
          git checkout -b "${{ env.ModuleName }}_$BUILD_NAME"
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: winget
          path: winget-pkgs
      - name: Push to wingets-pkgs repository
        shell: bash
        run: |
          cd winget-pkgs
          git config --local user.email "igoravl@gmail.com"
          git config --local user.name "Igor Abade"
          git add manifests/i/Igoravl/${{ env.ModuleName }}/*
          git commit -m "Release $BUILD_NAME"
          git push -u origin "${{ env.ModuleName }}_$BUILD_NAME"
      - name: Create pull request to microsoft/winget-pkgs
        shell: pwsh
        run: |
          # Install module
          Install-Module PowerShellForGitHub -Scope CurrentUser -Force
          # Connect to GitHub
          Set-GitHubConfiguration -SuppressTelemetryReminder -DefaultOwnerName igoravl -DefaultRepository winget-pkgs
          Set-GitHubAuthentication -SessionOnly -Credential (New-Object System.Management.Automation.PSCredential @("pat",
            (ConvertTo-SecureString -String $env:GITHUB_TOKEN -AsPlainText -Force)))
          # Create pull request
          New-GitHubPullRequest -OwnerName Microsoft -RepositoryName winget-pkgs `
            -Title "${{ env.ModuleName }}_$env:BUILD_NAME" -Head "igoravl:${{ env.ModuleName }}_$env:BUILD_NAME" -base master -Body @'
          - [x] Have you signed the [Contributor License Agreement](https://cla.opensource.microsoft.com/microsoft/winget-pkgs)?
          - [x] Have you checked that there aren't other open [pull requests](https://github.com/microsoft/winget-pkgs/pulls) for the same manifest update/change?
          - [x] Have you validated your manifest locally with `winget validate --manifest <path>`? 
          - [x] Have you tested your manifest locally with `winget install --manifest <path>`?
          - [x] Does your manifest conform to the [1.0 schema](https://github.com/microsoft/winget-cli/blob/master/doc/ManifestSpecv1.0.md)?

          Note: `<path>` is the name of the directory containing the manifest you're submitting.

          -----
          '@
