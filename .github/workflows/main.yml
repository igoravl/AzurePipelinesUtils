name: Build

env:
  Config: Release
  Debug: ${{ false }}
  ModuleName: AzurePipelinesUtils

on:
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  Build:

    runs-on: ubuntu-latest
    env:
      PS_GALLERY_TOKEN: ${{ secrets.PSGALLERY_API_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Build module
        id: build_module
        shell: pwsh
        run: |
          ./Build.ps1 -Targets Package -Verbose:$${{ env.Debug }} -InstallDependencies
      # - name: Publish Test Results
      #   uses: EnricoMi/publish-unit-test-result-action/windows@v2
      #   if: always()
      #   with:
      #     files: |
      #       out\TestResults-Pester*.xml
      - name: Publish Portable
        uses: actions/upload-artifact@v4
        with:
          name: portable
          path: "out/portable/*.zip"
      - name: Publish Docs
        uses: actions/upload-artifact@v4
        with:
          name: docs
          path: "Docs/*"
    outputs:
      BUILD_NAME: ${{ steps.build_module.outputs.BUILD_NAME }}

  Staging:

    runs-on: ubuntu-latest
    environment: staging
    needs: [ Build ]
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      BUILD_NAME: ${{ needs.Build.outputs.BUILD_NAME }}
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
      - name: Extract release notes
        id: extract_release_notes
        shell: pwsh
        run: |
          $fileName = (Get-ChildItem 'docs/ReleaseNotes/*.md' | Sort-Object Name -Descending | Select -ExpandProperty FullName -First 1)
          Write-Output $fileName
          $releaseNotes = (Get-Content $fileName -Encoding UTF8 | Select-Object -Skip 4)
          Write-Output $releaseNotes
          Write-Output 'RELEASE_NOTES<<EOF' >> $env:GITHUB_OUTPUT
          Write-Output $releaseNotes >> $env:GITHUB_OUTPUT
          Write-Output 'EOF' >> $env:GITHUB_OUTPUT
      - name: Create Draft Release
        id: create_release
        shell: pwsh
        run: |
          # Install module
          Install-Module PowerShellForGitHub -Scope CurrentUser -Force

          # Connect to GitHub
          Set-GitHubConfiguration -SuppressTelemetryReminder -DefaultOwnerName igoravl -DefaultRepository ${{ env.ModuleName }}

          $ghCreds = New-Object System.Management.Automation.PSCredential @( "pat",
            (ConvertTo-SecureString -String $env:GITHUB_TOKEN -AsPlainText -Force)
          )
          Set-GitHubAuthentication -Credential $ghCreds -SessionOnly 

          # Remove stale draft releases
          # TODO: Limit scope to this pull request (filter by PR name)
          Get-GitHubRelease | Where-Object Draft -eq $true | Remove-GitHubRelease -Force

          # Create new draft releases
          $release = New-GitHubRelease -Tag 'v${{ env.BUILD_NAME }}' -Name 'Release ${{ env.BUILD_NAME }}' `
             -Draft -PreRelease:($env:BUILD_NAME -like '*-*') -commitish '${{ github.sha }}' -Body: @'
          ${{ steps.extract_release_notes.outputs.RELEASE_NOTES }}
          '@

          # Upload assets
          @('portable/${{ env.ModuleName }}*.zip') `
          | ForEach-Object { New-GitHubReleaseAsset -Release $release.Id -Path $_ }

    outputs:
      BUILD_NAME: ${{ needs.Build.outputs.BUILD_NAME }}
      RELEASE_NOTES: ${{ steps.extract_release_notes.outputs.RELEASE_NOTES }}

  Release: 

    runs-on: ubuntu-latest
    environment: production
    needs: [ Staging ]
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      BUILD_NAME: ${{ needs.Staging.outputs.BUILD_NAME }}
    steps: 
      - name: Promote release
        id: promote_release
        shell: pwsh
        run: |
          # Install module
          Install-Module PowerShellForGitHub -Scope CurrentUser -Force
          # Connect to GitHub
          Set-GitHubConfiguration -SuppressTelemetryReminder -DefaultOwnerName igoravl -DefaultRepository ${{ env.ModuleName }}
          Set-GitHubAuthentication -SessionOnly -Credential (New-Object System.Management.Automation.PSCredential @("pat",
            (ConvertTo-SecureString -String $env:GITHUB_TOKEN -AsPlainText -Force)))
          # Promote release
          $rel = Get-GitHubRelease `
          | Where-Object { ($_.Draft -eq $true) -and ($_.Name -eq "Release $($env:BUILD_NAME)")  }
          Set-GitHubRelease -Release $rel.id -Draft:$false
          Write-Output "RELEASE_URL=$($rel.html_url)" >> $env:GITHUB_OUTPUT
          Write-Output "RELEASE_TAG=$($env:BUILD_NAME.Replace('+', '%2B'))" >> $env:GITHUB_OUTPUT
    outputs:
      BUILD_NAME: ${{ needs.Staging.outputs.BUILD_NAME }}
      RELEASE_NOTES: ${{ needs.Staging.outputs.RELEASE_NOTES }}
      RELEASE_URL: ${{ steps.promote_release.outputs.RELEASE_URL }}
      RELEASE_TAG: ${{ steps.promote_release.outputs.RELEASE_TAG }}

  PSGallery:

    runs-on: ubuntu-latest
    needs: [ Release ]
    environment: psgallery
    env:
      RELEASE_NOTES: ${{ needs.Release.outputs.RELEASE_NOTES }}
      PSGALLERY_KEY: ${{ secrets.API_KEY }}
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: portable
      - name: Publish artifact
        shell: pwsh
        run: |
          Install-Module PackageManagement -Scope CurrentUser -Force
          Install-Module PowerShellGet -Scope CurrentUser -Force
          Expand-Archive AzureArtifacts*.zip -DestinationPath Module/${{ env.ModuleName }}
          $releaseNotes = $env:RELEASE_NOTES
          Publish-Module -Name Module/${{ env.ModuleName }} -NuGetApiKey $env:PSGALLERY_KEY -AllowPreRelease -ReleaseNotes $releaseNotes


